

//time complexity
//t(n)=O(n2)
//BRUTE FORCE
// class Solution {
//  public:
//     vector<int> twoSum(vector<int>& nums, int target) {
//        int n=nums.size();
//         for (int i = 0; i < n; i++) {
//             for (int j = i + 1; j < n; j++) {
//                 if (nums[i] + nums[j] == target){
//                     return {i, j};
//                }
//             }
//         }
//         return {};
//     }
// };



//BETTER APPROACH 
//TC=O(N)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
       unordered_map<int,int>mp;
       for(int i=0;i<n;i++){
            int j=nums[i];
            int left=target-j;
            if(mp.find(left)!=mp.end()) 
            return {mp[left],i};
            else
            mp[j]=i;
       }

       return {-1,-1};
    }
};
