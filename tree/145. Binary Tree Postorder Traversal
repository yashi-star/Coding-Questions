//recursive
class Solution {
public:
vector<int>num;
    vector<int> postorderTraversal(TreeNode* root) {
        
        if(root==NULL)
        return num;
        postorderTraversal(root->left);
         postorderTraversal(root->right);
         num.push_back(root->val);
         return num;
    }
};

//iterative
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
             vector<int>ans;
        if(root==NULL)
        return ans;
       stack<TreeNode *>s;
       s.push(root);
        TreeNode *node;
       while(!s.empty()){
           node=s.top();
            s.pop();
           if(node->left){
           s.push(node->left);
           }
            if(node->right){
           s.push(node->right);
        }
               ans.push_back(node->val);
       }
       reverse(ans.begin(),ans.end());
       return ans;
    }
};
